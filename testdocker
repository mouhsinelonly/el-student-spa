# Stage 0, "build-stage", based on Node.js, to build and compile the frontend
FROM node:10 as build-stage

RUN apt-get update && \
    apt-get -y install xvfb gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 \
      libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 \
      libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 \
      libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 \
      libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget && \
    rm -rf /var/lib/apt/lists/*

# Add user so we don't need --no-sandbox.
RUN groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \
    && mkdir -p /home/pptruser/Downloads \
    && chown -R pptruser:pptruser /home/pptruser

# Run everything after as non-privileged user.
RUN /bin/su pptruser

WORKDIR /app

COPY --chown=pptruser:pptruser ./ /app/

RUN rm -rf node_modules/

RUN npm install

COPY dockerfiles/index.js node_modules⁩/react-custom-scrollbars⁩/lib⁩/Scrollbars⁩/index.js
COPY dockerfiles/defaultRenderElements.js node_modules⁩/react-custom-scrollbars⁩/lib⁩/Scrollbars⁩/defaultRenderElements.js


ARG APIBASE=https://api.el-css.edu.om

RUN npm run-script build

# Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx
FROM pagespeed/nginx-pagespeed

COPY --from=build-stage /app/dist/ /usr/share/nginx/html

COPY --from=build-stage /nginx.conf /etc/nginx/conf.d/default.conf

COPY dockerfiles/redirect-affiliate.conf /etc/nginx/extra-conf.d/nginx-redirect-affiliate.conf